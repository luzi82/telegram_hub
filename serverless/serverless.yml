service: telegram-hub

provider:
  name: aws
  runtime: python3.7
  profile: ${file(../conf/serverless.${opt:stage,'dev'}.json):AWS_PROFILE, 'default'}
  region: ${file(../conf/serverless.${opt:stage,'dev'}.json):AWS_REGION, 'us-west-2'}
  environment:
    S3_BUCKET: ${file(../conf/serverless.${opt:stage,'dev'}.json):S3_BUCKET, 'telegram-hub'}
    TELEGRAM_TOKEN: ${file(../conf/serverless.${opt:stage,'dev'}.json):TELEGRAM_TOKEN}
    TELEGRAM_HUB_SECRET: ${file(../conf/serverless.${opt:stage,'dev'}.json):TELEGRAM_HUB_SECRET}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        - arn:aws:s3:::${file(../conf/serverless.${opt:stage,'dev'}.json):S3_BUCKET, 'telegram-hub'}/*
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - arn:aws:s3:::${file(../conf/serverless.${opt:stage,'dev'}.json):S3_BUCKET, 'telegram-hub'}

package:
  exclude:
    - ./**
  include:
    - handler.py
    - th.py

functions:
  webhook:
    handler: handler.webhook
    events:
      - http: POST /webhook

  set_webhook:
    handler: handler.set_webhook
    events:
      - http: POST /set_webhook

  send_msg:
    handler: handler.send_msg
    events:
      - http: POST /send_msg

resources:
  Resources:
    S3BucketOutputs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(../conf/serverless.${opt:stage,'dev'}.json):S3_BUCKET, 'telegram-hub'}

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false
